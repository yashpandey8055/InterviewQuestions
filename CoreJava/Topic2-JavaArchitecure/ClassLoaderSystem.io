JVM is an abstract virtual machine whose sole responsibility is to convert generated ByteCode to Machine code and execute it. 
JRE is the implementaion of JVM. The compiler compiles Java code into .class files (the bytecode) and these .class files are then loaded and executed by JVM. 

JVM architecture works with three main Subsystems -> 
A) Classloader Subsystem 
B) Runtime Data Area 
C) Execution Engine 


A) Classloader Subsystem -> 
The class loader subsystem is responsible for loading , linking and initializing a class file when the class is referred for the first time. 

1) Loading -> This component handles loading class details from hardware system into JVM memory. It will load all the binary data like (methods , static varibales , fully qualified class names) into the Method Area. "JVM immediately created an object of Java.lang.class into the heap" 
There are three types of Classloaders available :
 a) Bootstrap classloader -> This classloader is responsible for loading class files from rt.jar and other classes in java.lang.* .
 b) Extension classloader -> This classloader is responsible for loading class from extension classpath (jdk/jre/lib/ext)
 c) Application/system classloader -> This classloaded is responsible for loading class from system classpath. 
 
 DELEGATE HIERARCHY MODEL -> The classloaded works in a delegation hierarchy model. 
 
 DELEGATION :
 a) Whenever JVM comes across a class, the JVM checks if the class is already loaded. if not , If the class is present in method area then JVM will conside the class  , but if its not , JVM requests for class from ClassLoader System. 
 b) Once the .class file is requested to be loaded , the request goes to Applicatiom/System classloader which delegates the request to Extension which further delegates to Bootstrap classloader. 
 c) The bootstrap loader tries to load the class and if its not found in any of java.lang packages or rt.jar , the request is extended to Extension classloader
 d) The Extension loader tries to load the class and if its not found in extension classpath , the request is extended to Applicatiom/System classloader 
 e) If the class is not found by Applicatiom/System class loaded, then it throws "ClassNotFoundException". 
 
 VISIBILITY : 
 The classes loaded by parent is visible to child class loader but vice versa is not true. 
 
 UNIQUENESS : 
 Class loaded by Parent classloader is not loaded by child class loader. 
 
2) Linking -> Linking is the component which performs linking of the class , Interface and superclasses. As this involves allocation of new data structures, this is where outofmemory is thrown if the memory goes out of proportion. 